{"version":3,"file":"script-file-creator.js","sourceRoot":"","sources":["../src/script-file-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport { AdobeAppName, AdobeAppScriptFileType, CommandFileCreator, AdobeScriptBuilder, BroadcastBuilder, Config, Options } from \"./api\";\r\nimport newAdobeScriptBuilder from './script-builder';\r\nimport { newBroadcastBuilder } from './broadcast';\r\nimport defaults from './defaults';\r\n\r\nconst scriptingExtension: Map<AdobeAppName, AdobeAppScriptFileType> = new Map<AdobeAppName, AdobeAppScriptFileType>([\r\n    [AdobeAppName.Animate, AdobeAppScriptFileType.Jsfl],\r\n    [AdobeAppName.Photoshop, AdobeAppScriptFileType.Jsx],\r\n    [AdobeAppName.Illustrator, AdobeAppScriptFileType.Jsx],\r\n    [AdobeAppName.InDesign, AdobeAppScriptFileType.Jsx]\r\n]);\r\n\r\nconst newAdobeScriptFileCreator = (config: Config): CommandFileCreator => {\r\n    const appName: AdobeAppName = config.app.name\r\n    const jsPath: string = config.jsPath || defaults.scriptsPath;\r\n    const adobeScriptsPath: string = config.app.adobeScriptsPath || defaults.adobeScriptsPath;\r\n    const scriptBuilder: AdobeScriptBuilder = newAdobeScriptBuilder();\r\n    const broadcastBuilder: BroadcastBuilder = newBroadcastBuilder(config);\r\n\r\n    const buildVars = (args: any): string => {\r\n        let list: string[] = [];\r\n        let arg: any;\r\n        for (let name in args) {\r\n            arg = args[name];\r\n\r\n            if (arg) {\r\n                list.push(`var ${name}=${arg.constructor.name === \"String\"\r\n                    ? `\"${arg}\"`\r\n                    : arg.constructor.name === \"Array\" ? `${JSON.stringify(arg)}`\r\n                        : arg};`);\r\n\r\n            } else {\r\n                list.push(`var ${name};`);\r\n            }\r\n        }\r\n\r\n        return `${list.length ? list.join('\\n') : ''}`\r\n    };\r\n\r\n    const buildBody = (command: string, useBuiltInScript: boolean): string => {\r\n        const scriptPath: string = path.join(jsPath, appName, `${command}.js`);\r\n        const builtInScript: string = path.join(__dirname, '..', 'scripts', appName, `${command}.js`);\r\n        \r\n        if (useBuiltInScript && fs.existsSync(builtInScript)) {\r\n            console.info(`Built-in Script file found: ${builtInScript}`);\r\n            return fs.readFileSync(builtInScript).toString();\r\n        }\r\n\r\n        if (fs.existsSync(scriptPath)) {\r\n            console.info(`Custom script file found: ${scriptPath}`);\r\n            return fs.readFileSync(scriptPath).toString();\r\n        }\r\n\r\n        return `\"\";`;\r\n    }\r\n\r\n    const createFile = (command: string, content: string): Promise<string> => new Promise((resolve, reject) => {\r\n        const filePath: string = path.join(adobeScriptsPath, `${command}.${scriptingExtension.get(appName)}`);\r\n        const fileDirname: string = path.dirname(filePath);\r\n        if(fs.existsSync(fileDirname)) {\r\n            fs.writeFile(filePath, content, \"utf-8\", (err) => {\r\n                return err ? reject(err) : resolve(filePath)\r\n            });\r\n        } else {\r\n            return reject(`The path (${fileDirname}) is not valid.`)\r\n        }\r\n    });\r\n\r\n    return {\r\n        create: (command: string, useBuiltInScript: boolean, args?: Options): Promise<string> =>\r\n            new Promise((resolve, reject) => {\r\n                const variables: string = buildVars(args);\r\n                const body: string = buildBody(command, useBuiltInScript);\r\n                const broadcast: string = broadcastBuilder.build(command);\r\n\r\n                let content: string = scriptBuilder\r\n                    .setName(command)\r\n                    .setVariables(variables)\r\n                    .setBody(body)\r\n                    .setBroadcast(broadcast)\r\n                    .build();\r\n                return createFile(command, content).then(resolve).catch(reject);\r\n            })\r\n    }\r\n}\r\n\r\nexport default newAdobeScriptFileCreator;"]}