{"version":3,"file":"process.js","sourceRoot":"","sources":["../src/process.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,+CAA4E;AAE5E,yBAAgC;AAEhC,IAAM,kBAAkB,GAAG,UAAC,OAAe,EAAE,aAAuB,EAAE,OAA6B;IACjG,IAAI,OAAqB,CAAC;IAC1B,IAAM,eAAe,GAAa,OAAO,CAAC,eAAe,CAAC;IAC1D,IAAM,cAAc,GAAW,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC;IACpD,IAAM,OAAO,GAAW,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAExE,IAAM,cAAc,GAAG,UAAC,QAAgB,IAAK,OAAA,UAAC,KAAoB,EAAE,MAAc,EAAE,MAAc;QAChG,IAAI,gBAAgB,GAAY,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,IAAI,cAAc,IAAI,cAAc,GAAG,CAAC,CAAC;QAC9F,IAAI,gBAAgB,IAAI,eAAe,EAAE;YACvC,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;aAAM;YACL,aAAa,CAAC,MAAM,CAAC,CAAC;SACvB;IACH,CAAC,EAP4C,CAO5C,CAAC;IAEF,OAAO;QACL,MAAM,EAAC,UAAC,aAAqB;YAC3B,IAAM,gBAAgB,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACpD,IAAG,CAAC,IAAA,eAAU,EAAC,OAAO,CAAC,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;aACnC;YACD,OAAO,GAAG,IAAA,wBAAQ,EAAC,OAAO,EAAE,CAAC,aAAa,CAAC,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,EAAE,gBAAgB,CAAC,CAAC;QAC9F,CAAC;QACD,IAAI,EAAC;YACH,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC;QACD,GAAG,EAAC,UAAC,WAAmB;YACtB,IAAA,oBAAI,EAAC,UAAG,OAAO,cAAI,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,cAAI,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAE,CAAC,CAAC;QACzF,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AAED,kBAAe,kBAAkB,CAAC","sourcesContent":["import * as os from \"os\";\r\nimport { exec, ChildProcess, execFile, ExecException } from \"child_process\";\r\nimport { AdobeProcessOptions, AdobeAppProcess } from \"./api\";\r\nimport { existsSync } from 'fs';\r\n\r\nconst newAdobeAppProcess = (appPath: string, closeCallback: Function, options?: AdobeProcessOptions): AdobeAppProcess => {\r\n  let process: ChildProcess;\r\n  const timeoutCallback: Function = options.timeoutCallback;\r\n  const processTimeout: number = options.timeout || 0;\r\n  const openCmd: string = os.platform() === \"win32\" ? \"start\" : \"open -a\";\r\n\r\n  const createCallback = (execTime: number) => (error: ExecException, stdout: string, stderr: string) => {\r\n    let becauseOfTimeout: boolean = Date.now() - execTime >= processTimeout && processTimeout > 0;\r\n    if (becauseOfTimeout && timeoutCallback) {\r\n      timeoutCallback(error);\r\n    } else {\r\n      closeCallback(stdout);\r\n    }\r\n  };\r\n\r\n  return {\r\n    create:(openAppScript: string): void => {\r\n      const execFileCallback = createCallback(Date.now());\r\n      if(!existsSync(appPath)) {\r\n        throw new Error('Wrong app path');\r\n      }\r\n      process = execFile(appPath, [openAppScript], { timeout: processTimeout }, execFileCallback);\r\n    },\r\n    kill:(): void => {\r\n      process.kill();\r\n    },\r\n    run:(commandPath: string): void => {\r\n      exec(`${openCmd} ${appPath.replace(/ /g, \"\\\\ \")} ${commandPath.replace(/ /g, \"\\\\ \")}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default newAdobeAppProcess;"]}