{"version":3,"file":"broadcast.js","sourceRoot":"","sources":["../src/broadcast.ts"],"names":[],"mappings":";;;AAAA,6BAAiF;AACjF,+CAAqC;AAErC,IAAM,gBAAgB,GAA+C,IAAI,GAAG,CAAwC;IAClH,CAAC,kBAAY,CAAC,OAAO,EAAE,UAAC,GAAW,IAAK,OAAA,kCAA0B,GAAG,SAAK,EAAlC,CAAkC,CAAC;IAC3E,CAAC,kBAAY,CAAC,SAAS,EAAE,UAAC,GAAW,IAAK,OAAA,uBAAe,GAAG,SAAK,EAAvB,CAAuB,CAAC;IAClE,CAAC,kBAAY,CAAC,WAAW,EAAE,UAAC,GAAW,IAAK,OAAA,uBAAe,GAAG,SAAK,EAAvB,CAAuB,CAAC;CACrE,CAAC,CAAC;AAEH,IAAM,qBAAqB,GAAG,UAAC,IAAY,EAAE,IAAY,EAAE,OAAe;IACtE,OAAA,iCAA0B,IAAI,qBAAW,IAAI,oBAAU,OAAO,CAAE;AAAhE,CAAgE,CAAC;AAE9D,IAAM,mBAAmB,GAAG,UAAC,MAAc;IAEhD,OAAO;QACL,KAAK,EAAL,UAAM,OAAe;YACnB,IAAM,OAAO,GAAW,2CAAiC,OAAO,kIAAkH,CAAC;YACnL,IAAM,SAAS,GAA4B,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACjF,IAAM,GAAG,GAAW,qBAAqB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC7E,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AAVY,QAAA,mBAAmB,uBAU/B;AAEM,IAAM,SAAS,GAAG,UAAC,IAAY,EAAE,IAAY,EAAE,OAAyB;IAC7E,IAAM,GAAG,GAAW,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/E,IAAA,oBAAI,EAAC,GAAG,CAAC,CAAC;AACZ,CAAC,CAAA;AAHY,QAAA,SAAS,aAGrB","sourcesContent":["import { AdobeAppName, BroadcastBuilder, BroadcastMessage, Config } from \"./api\";\r\nimport { exec } from 'child_process';\r\n\r\nconst broadcastMethods: Map<AdobeAppName, (cmd: string) => string> = new Map<AdobeAppName, (cmd: string) => string>([\r\n  [AdobeAppName.Animate, (cmd: string) => `FLfile.runCommandLine(\"${cmd}\");`],\r\n  [AdobeAppName.Photoshop, (cmd: string) => `app.system(\"${cmd}\");`],\r\n  [AdobeAppName.Illustrator, (cmd: string) => `app.system(\"${cmd}\");`],\r\n]);\r\n\r\nconst buildBroadcastCommand = (host: string, port: number, message: string) =>\r\n    `adobe-broadcast --host=${host} --port=${port} --msg=${message}`;\r\n\r\nexport const newBroadcastBuilder = (config: Config): BroadcastBuilder => {\r\n\r\n  return {\r\n    build(command: string) {\r\n      const payload: string = `{\\\\\\\\\\\\\"command\\\\\\\\\\\\\":\\\\\\\\\\\\\"${command}\\\\\\\\\\\\\",\\\\\\\\\\\\\"stdout\\\\\\\\\\\\\":\\\\\\\\\\\\\"\" + __stdout + \"\\\\\\\\\\\\\",\\\\\\\\\\\\\"stderr\\\\\\\\\\\\\":\\\\\\\\\\\\\"\" + __stderr + \"\\\\\\\\\\\\\"}`;\r\n      const broadcast: (msg: string) => string = broadcastMethods.get(config.app.name);\r\n      const cmd: string = buildBroadcastCommand(config.host, config.port, payload);\r\n      return broadcast(cmd);\r\n    }\r\n  }\r\n}\r\n\r\nexport const broadcast = (host: string, port: number, message: BroadcastMessage) => {\r\n  const cmd: string = buildBroadcastCommand(host, port, JSON.stringify(message));\r\n  exec(cmd);\r\n}\r\n"]}