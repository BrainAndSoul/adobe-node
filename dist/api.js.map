{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":";;;AAiBA,IAAY,YAOX;AAPD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;IACvB,2CAA2B,CAAA;IAC3B,qCAAqB,CAAA;IACrB,mCAAmB,CAAA;IACnB,8CAA8B,CAAA;AAChC,CAAC,EAPW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAOvB;AAED,IAAY,sBAGX;AAHD,WAAY,sBAAsB;IAChC,uCAAa,CAAA;IACb,qCAAW,CAAA;AACb,CAAC,EAHW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAGjC;AA4ED,IAAY,aAWX;AAXD,WAAY,aAAa;IACvB,qCAAoB,CAAA;IACpB,uCAAsB,CAAA;IACtB,6CAA4B,CAAA;IAC5B,+CAA8B,CAAA;IAC9B,iDAAgC,CAAA;IAChC,iEAAgD,CAAA;IAChD,+CAA8B,CAAA;IAC9B,mDAAkC,CAAA;IAClC,oDAAmC,CAAA;IACnC,yCAAwB,CAAA;AAC1B,CAAC,EAXW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAWxB","sourcesContent":["\r\nexport interface AdobeApp {\r\n  init(): void;\r\n  on(event: string, callback: Function): AdobeApp;\r\n  runScript(command: string, options?: Options): Promise<any>;\r\n  selectDocument(document: string): Promise<any>;\r\n  saveDocument(...documents: string[]): Promise<any>;\r\n  saveAsDocument(document: string, saveAs: string, options?: object): Promise<any>;\r\n  openDocument(...documents: string[]): Promise<any>;\r\n  closeDocument(...documents: string[]): Promise<any>;\r\n  saveAndCloseDocument(...documents: string[]): Promise<any>;\r\n  newDocument(options?: NewDocumentOptions): Promise<any>\r\n  open(): Promise<any>;\r\n  close(): Promise<void>;\r\n  dispose(): void;\r\n}\r\n\r\nexport enum AdobeAppName {\r\n  Animate = 'animate',\r\n  Photoshop = 'photoshop',\r\n  Illustrator = 'illustrator',\r\n  InDesign = 'indesign',\r\n  Acrobat = 'acrobat',\r\n  AfterEffects = 'after_effects'\r\n}\r\n\r\nexport enum AdobeAppScriptFileType {\r\n  Jsfl = 'jsfl',\r\n  Jsx = 'jsx'\r\n}\r\n\r\nexport type AdobeProcessOptions = {\r\n  timeout?: number;\r\n  timeoutCallback?: Function;\r\n}\r\n\r\nexport type Options = {\r\n  [prop:string]:any\r\n}\r\n\r\nexport type NewDocumentOptions = Options & {\r\n  title?: string;\r\n  width?: number,\r\n  height?: number\r\n}\r\n\r\nexport type AdobeAppConfig = {\r\n  name: AdobeAppName;\r\n  path: string;\r\n  adobeScriptsPath: string;\r\n}\r\n\r\nexport type Config = {\r\n  app:AdobeAppConfig;\r\n  host: string;\r\n  port: number;\r\n  appTimeout?: number;\r\n  jsPath?: string;\r\n}\r\n\r\nexport interface AdobeEventListener {\r\n  addEventListener(event: string, callback: Function): void;\r\n  start(): void;\r\n  close(): void;\r\n}\r\n\r\nexport interface AdobeAppProcess {\r\n  create(script: string): void;\r\n  kill(): void;\r\n  run(commandPath: string): void;\r\n}\r\n\r\nexport interface CommandStack {\r\n  push(data: AdobeScriptCommand): void;\r\n  resolve(commandName: string): Promise<void>;\r\n}\r\n\r\nexport interface AdobeScriptBuilder {\r\n  setName(value: string): AdobeScriptBuilder;\r\n  setVariables(value: string): AdobeScriptBuilder;\r\n  setBody(value: string): AdobeScriptBuilder;\r\n  setBroadcast(value: string): AdobeScriptBuilder;\r\n  build(): string;\r\n}\r\n\r\nexport interface CommandFileCreator {\r\n  create(command: string, useBuiltInScript?: boolean, options?: Options): Promise<string>;\r\n}\r\n\r\nexport interface BroadcastBuilder {\r\n  build(command: string): string;\r\n}\r\n\r\nexport interface BroadcastMessage {\r\n  command: string;\r\n  stdout?: string;\r\n  stderr?: string;\r\n}\r\n\r\nexport interface AdobeScriptCommand {\r\n  command: string;\r\n  resolve: Function;\r\n  reject: Function;\r\n}\r\n\r\nexport enum AdobeAppEvent {\r\n  OpenApp = \"open_app\",\r\n  CloseApp = \"close_app\",\r\n  NewDocument = \"new_document\",\r\n  OpenDocument = \"open_document\",\r\n  CloseDocument = \"close_document\",\r\n  SaveAndCloseDocument = \"save_and_close_document\",\r\n  SaveDocument = \"save_document\",\r\n  SelectDocument = \"select_document\",\r\n  SaveAsDocument = \"save_as_document\",\r\n  RunScript = \"run_script\"\r\n}\r\n"]}